import os
from datetime import datetime
from docx import Document
from docx.shared import Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
import json

class ReportGeneratorAgent:
    def __init__(self):
        self.agent_name = "📄 Report Generator Agent"
        self.agent_role = "Membuat laporan audit yang profesional dan dapat diunduh"
        
        # Agent's internal prompt/instructions
        self.system_prompt = """
        Anda adalah Report Generator Agent dalam sistem ReguBot Multi-Agent.
        
        IDENTITAS AGENT:
        - Nama: Report Generator Agent
        - Peran: Spesialis pembuatan laporan audit profesional
        - Tugas Utama: Menghasilkan laporan compliance yang komprehensif dan actionable
        
        INSTRUKSI KERJA:
        1. Terima hasil analisis dari Compliance Checker Agent
        2. Susun laporan dalam format terstruktur dan profesional
        3. Gunakan bahasa formal yang jelas dan mudah dipahami
        4. Sertakan visualisasi data dan statistik compliance
        5. Berikan rekomendasi yang spesifik dan actionable
        
        STRUKTUR LAPORAN:
        - Executive Summary dengan key findings
        - Compliance Score dan metrics
        - Detailed findings dengan evidence
        - Risk assessment dan prioritas
        - Actionable recommendations
        - Appendix dengan referensi regulasi
        
        FORMAT OUTPUT:
        - DOCX untuk editing dan sharing
        - PDF untuk presentasi formal
        - Professional layout dengan branding
        - Charts dan tables untuk visualisasi
        
        OUTPUT: Laporan siap unduh dalam format DOCX dan PDF
        """
        
        print(f"✅ {self.agent_name} initialized")
    
    def generate_professional_report(self, compliance_results, original_filename, session_id):
        """
        Main method untuk generate laporan profesional dengan agentic behavior
        """
        print(f"{self.agent_name}: Memulai pembuatan laporan profesional")
        print(f"{self.agent_name}: Compliance Score: {compliance_results['compliance_score']}%")
        
        try:
            # Buat dokumen baru dengan template profesional
            doc = Document()
            
            # Setup document properties
            self._setup_document_properties(doc, original_filename)
            
            # 1. Cover Page
            self._add_cover_page(doc, original_filename, compliance_results)
            
            # 2. Executive Summary
            self._add_executive_summary(doc, compliance_results)
            
            # 3. Compliance Dashboard
            self._add_compliance_dashboard(doc, compliance_results)
            
            # 4. Detailed Findings
            self._add_detailed_findings(doc, compliance_results)
            
            # 5. Risk Assessment
            self._add_risk_assessment(doc, compliance_results)
            
            # 6. Recommendations
            self._add_actionable_recommendations(doc, compliance_results)
            
            # 7. Appendix
            self._add_appendix(doc, compliance_results)
            
            # Save file
            report_filename = f"ReguBot_Audit_Report_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
            report_path = os.path.join('reports', report_filename)
            doc.save(report_path)
            
            print(f"{self.agent_name}: ✅ Laporan berhasil dibuat: {report_filename}")
            return report_path
        
        except Exception as e:
            print(f"{self.agent_name}: ❌ Error - {str(e)}")
            raise Exception(f"Report Generator Agent Error: {str(e)}")
    
    def _setup_document_properties(self, doc, filename):
        """Setup properties dokumen"""
        core_props = doc.core_properties
        core_props.title = "ReguBot Compliance Audit Report"
        core_props.author = "ReguBot AI System"
        core_props.subject = f"Compliance Analysis for {filename}"
        core_props.comments = "Generated by ReguBot Multi-Agent AI System"
        core_props.created = datetime.now()
    
    def _add_cover_page(self, doc, filename, results):
        """Tambah cover page profesional"""
        # Title
        title = doc.add_heading('LAPORAN AUDIT COMPLIANCE', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_run = title.runs[0]
        title_run.font.size = Inches(0.5)
        title_run.font.color.rgb = RGBColor(0x1f, 0x4e, 0x79)
        
        # Subtitle
        subtitle = doc.add_heading('ReguBot Multi-Agent AI Analysis', level=2)
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Add some space
        doc.add_paragraph()
        doc.add_paragraph()
        
        # Document info table
        info_table = doc.add_table(rows=6, cols=2)
        info_table.style = 'Light Grid Accent 1'
        info_table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        info_data = [
            ['📄 Dokumen Dianalisis:', filename],
            ['📅 Tanggal Analisis:', datetime.now().strftime('%d %B %Y')],
            ['⏰ Waktu Analisis:', datetime.now().strftime('%H:%M:%S WIB')],
            ['🤖 Sistem AI:', 'ReguBot Multi-Agent v1.0'],
            ['📊 Compliance Score:', f"{results['compliance_score']}%"],
            ['🔒 Status Keamanan:', 'Offline & Secure Processing']
        ]
        
        for i, (label, value) in enumerate(info_data):
            info_table.cell(i, 0).text = label
            info_table.cell(i, 1).text = value
            # Bold the labels
            info_table.cell(i, 0).paragraphs[0].runs[0].font.bold = True
        
        # Add page break
        doc.add_page_break()
    
    def _add_executive_summary(self, doc, results):
        """Tambah executive summary dengan insights"""
        doc.add_heading('📋 EXECUTIVE SUMMARY', level=1)
        
        # Overall assessment
        score = results['compliance_score']
        if score >= 80:
            assessment = "BAIK"
            color = "hijau"
            icon = "🟢"
        elif score >= 60:
            assessment = "SEDANG"
            color = "kuning"
            icon = "🟡"
        else:
            assessment = "PERLU PERBAIKAN"
            color = "merah"
            icon = "🔴"
        
        summary_text = f"""
{icon} STATUS COMPLIANCE: {assessment}

Analisis compliance telah dilakukan menggunakan sistem Multi-Agent AI ReguBot terhadap dokumen yang disubmit. 
Dari total {results['total_requirements']} requirement yang diperiksa menggunakan AI analysis, 
dokumen mencapai skor compliance sebesar {results['compliance_score']}%.

🔍 TEMUAN UTAMA:
• {len(results['compliant_items'])} requirement telah dipenuhi dengan baik
• {len(results['non_compliant_items'])} requirement memerlukan perbaikan atau penyempurnaan
• Analisis dilakukan terhadap {len(results['analysis_metadata']['standards_analyzed'])} standar regulasi
• Dokumen diproses dengan teknologi AI offline untuk menjaga keamanan data

📊 DISTRIBUSI COMPLIANCE:
• Compliant: {len(results['compliant_items'])} items ({round(len(results['compliant_items'])/results['total_requirements']*100, 1)}%)
• Non-Compliant: {len(results['non_compliant_items'])} items ({round(len(results['non_compliant_items'])/results['total_requirements']*100, 1)}%)

💡 REKOMENDASI UTAMA:
Laporan ini memberikan detail lengkap mengenai setiap requirement yang diperiksa beserta 
rekomendasi perbaikan yang dapat diterapkan untuk meningkatkan tingkat compliance.
        """
        
        doc.add_paragraph(summary_text.strip())
        doc.add_paragraph()
    
    def _add_compliance_dashboard(self, doc, results):
        """Tambah dashboard compliance dengan metrics"""
        doc.add_heading('📊 COMPLIANCE DASHBOARD', level=1)
        
        # Main metrics table
        metrics_table = doc.add_table(rows=2, cols=4)
        metrics_table.style = 'Medium Grid 1 Accent 1'
        
        # Headers
        headers = ['Overall Score', 'Total Requirements', 'Compliant Items', 'Non-Compliant Items']
        for i, header in enumerate(headers):
            cell = metrics_table.cell(0, i)
            cell.text = header
            cell.paragraphs[0].runs[0].font.bold = True
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Values
        values = [
            f"{results['compliance_score']}%",
            str(results['total_requirements']),
            str(len(results['compliant_items'])),
            str(len(results['non_compliant_items']))
        ]
        
        for i, value in enumerate(values):
            cell = metrics_table.cell(1, i)
            cell.text = value
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            cell.paragraphs[0].runs[0].font.size = Inches(0.2)
        
        doc.add_paragraph()
        
        # Standards breakdown
        doc.add_heading('📚 Breakdown per Standar', level=2)
        
        standards_breakdown = {}
        for item in results['compliant_items'] + results['non_compliant_items']:
            std = item['standard_code']
            if std not in standards_breakdown:
                standards_breakdown[std] = {'compliant': 0, 'non_compliant': 0}
        
        for item in results['compliant_items']:
            standards_breakdown[item['standard_code']]['compliant'] += 1
        
        for item in results['non_compliant_items']:
            standards_breakdown[item['standard_code']]['non_compliant'] += 1
        
        if standards_breakdown:
            std_table = doc.add_table(rows=len(standards_breakdown) + 1, cols=4)
            std_table.style = 'Light List Accent 1'
            
            # Headers
            headers = ['Standar', 'Compliant', 'Non-Compliant', 'Score']
            for i, header in enumerate(headers):
                cell = std_table.cell(0, i)
                cell.text = header
                cell.paragraphs[0].runs[0].font.bold = True
            
            # Data
            for i, (std, data) in enumerate(standards_breakdown.items(), 1):
                total = data['compliant'] + data['non_compliant']
                score = round((data['compliant'] / total) * 100, 1) if total > 0 else 0
                
                std_table.cell(i, 0).text = std
                std_table.cell(i, 1).text = str(data['compliant'])
                std_table.cell(i, 2).text = str(data['non_compliant'])
                std_table.cell(i, 3).text = f"{score}%"
        
        doc.add_paragraph()
    
    def _add_detailed_findings(self, doc, results):
        """Tambah detailed findings dengan evidence"""
        doc.add_heading('🔍 DETAILED FINDINGS', level=1)
        
        # Compliant items
        if results['compliant_items']:
            doc.add_heading('✅ Requirements yang Terpenuhi', level=2)
            
            for i, item in enumerate(results['compliant_items'], 1):
                doc.add_heading(f"{i}. {item['standard_code']} - {item['item_id']}: {item['title']}", level=3)
                
                # Requirement
                req_para = doc.add_paragraph()
                req_para.add_run("Requirement: ").font.bold = True
                req_para.add_run(item['requirement'])
                
                # Evidence
                evidence_para = doc.add_paragraph()
                evidence_para.add_run("Evidence: ").font.bold = True
                evidence_para.add_run(item['evidence'])
                
                # Confidence score
                conf_para = doc.add_paragraph()
                conf_para.add_run("Confidence Score: ").font.bold = True
                conf_para.add_run(f"{item.get('confidence_score', 0.8):.1%}")
                
                doc.add_paragraph()
        
        # Non-compliant items
        if results['non_compliant_items']:
            doc.add_heading('❌ Requirements yang Belum Terpenuhi', level=2)
            
            for i, item in enumerate(results['non_compliant_items'], 1):
                doc.add_heading(f"{i}. {item['standard_code']} - {item['item_id']}: {item['title']}", level=3)
                
                # Requirement
                req_para = doc.add_paragraph()
                req_para.add_run("Requirement: ").font.bold = True
                req_para.add_run(item['requirement'])
                
                # Reason
                reason_para = doc.add_paragraph()
                reason_para.add_run("Alasan Non-Compliance: ").font.bold = True
                reason_para.add_run(item['reason'])
                
                # Risk level
                risk_para = doc.add_paragraph()
                risk_para.add_run("Risk Level: ").font.bold = True
                risk_run = risk_para.add_run(item.get('risk_level', 'Medium'))
                
                # Color code risk levels
                if item.get('risk_level') == 'High':
                    risk_run.font.color.rgb = RGBColor(0xff, 0x00, 0x00)
                elif item.get('risk_level') == 'Medium':
                    risk_run.font.color.rgb = RGBColor(0xff, 0xa5, 0x00)
                else:
                    risk_run.font.color.rgb = RGBColor(0x00, 0x80, 0x00)
                
                # Suggestion
                sugg_para = doc.add_paragraph()
                sugg_para.add_run("Saran Perbaikan: ").font.bold = True
                sugg_para.add_run(item['suggestion'])
                
                doc.add_paragraph()
    
    def _add_risk_assessment(self, doc, results):
        """Tambah risk assessment"""
        doc.add_heading('⚠️ RISK ASSESSMENT', level=1)
        
        # Count risks by level
        risk_counts = {'High': 0, 'Medium': 0, 'Low': 0}
        for item in results['non_compliant_items']:
            risk_level = item.get('risk_level', 'Medium')
            risk_counts[risk_level] += 1
        
        # Risk summary table
        risk_table = doc.add_table(rows=4, cols=3)
        risk_table.style = 'Medium Grid 1 Accent 1'
        
        # Headers
        risk_table.cell(0, 0).text = 'Risk Level'
        risk_table.cell(0, 1).text = 'Count'
        risk_table.cell(0, 2).text = 'Priority'
        
        for i in range(3):
            risk_table.cell(0, i).paragraphs[0].runs[0].font.bold = True
        
        # Data
        risk_data = [
            ('🔴 High Risk', risk_counts['High'], 'Immediate Action Required'),
            ('🟡 Medium Risk', risk_counts['Medium'], 'Address Within 30 Days'),
            ('🟢 Low Risk', risk_counts['Low'], 'Monitor and Improve')
        ]
        
        for i, (level, count, priority) in enumerate(risk_data, 1):
            risk_table.cell(i, 0).text = level
            risk_table.cell(i, 1).text = str(count)
            risk_table.cell(i, 2).text = priority
        
        doc.add_paragraph()
        
        # Risk mitigation priorities
        doc.add_paragraph("🎯 PRIORITAS MITIGASI RISIKO:")
        
        priorities = []
        if risk_counts['High'] > 0:
            priorities.append(f"• URGENT: {risk_counts['High']} high-risk items memerlukan tindakan segera")
        if risk_counts['Medium'] > 0:
            priorities.append(f"• PENTING: {risk_counts['Medium']} medium-risk items perlu ditangani dalam 30 hari")
        if risk_counts['Low'] > 0:
            priorities.append(f"• MONITOR: {risk_counts['Low']} low-risk items untuk perbaikan berkelanjutan")
        
        for priority in priorities:
            doc.add_paragraph(priority)
    
    def _add_actionable_recommendations(self, doc, results):
        """Tambah rekomendasi yang actionable"""
        doc.add_heading('💡 ACTIONABLE RECOMMENDATIONS', level=1)
        
        # Immediate actions
        doc.add_heading('🚨 Tindakan Segera (0-7 hari)', level=2)
        
        immediate_actions = []
        for item in results['non_compliant_items']:
            if item.get('risk_level') == 'High':
                immediate_actions.append(f"• {item['standard_code']} {item['item_id']}: {item['suggestion']}")
        
        if immediate_actions:
            for action in immediate_actions[:5]:  # Limit to top 5
                doc.add_paragraph(action)
        else:
            doc.add_paragraph("• Tidak ada tindakan segera yang diperlukan")
        
        doc.add_paragraph()
        
        # Short-term actions
        doc.add_heading('📅 Tindakan Jangka Pendek (1-4 minggu)', level=2)
        
        short_term_actions = []
        for item in results['non_compliant_items']:
            if item.get('risk_level') == 'Medium':
                short_term_actions.append(f"• {item['standard_code']} {item['item_id']}: {item['suggestion']}")
        
        if short_term_actions:
            for action in short_term_actions[:5]:
                doc.add_paragraph(action)
        else:
            doc.add_paragraph("• Fokus pada maintenance compliance yang ada")
        
        doc.add_paragraph()
        
        # Long-term improvements
        doc.add_heading('🎯 Perbaikan Jangka Panjang (1-3 bulan)', level=2)
        
        long_term_improvements = [
            "• Implementasi sistem monitoring compliance otomatis",
            "• Training berkala untuk tim terkait regulasi terbaru",
            "• Review dan update kebijakan secara berkala",
            "• Audit internal compliance setiap 6 bulan",
            "• Dokumentasi proses compliance yang lebih baik"
        ]
        
        for improvement in long_term_improvements:
            doc.add_paragraph(improvement)
        
        # Overall suggestions from analysis
        if results.get('suggestions'):
            doc.add_paragraph()
            doc.add_heading('🔧 Saran Khusus dari AI Analysis', level=2)
            for suggestion in results['suggestions']:
                doc.add_paragraph(f"• {suggestion}")
    
    def _add_appendix(self, doc, results):
        """Tambah appendix dengan referensi"""
        doc.add_page_break()
        doc.add_heading('📚 APPENDIX', level=1)
        
        # Analysis metadata
        doc.add_heading('A. Analysis Metadata', level=2)
        
        metadata = results.get('analysis_metadata', {})
        meta_table = doc.add_table(rows=5, cols=2)
        meta_table.style = 'Light List Accent 1'
        
        meta_data = [
            ['Analysis Timestamp', metadata.get('timestamp', 'N/A')],
            ['AI Agent', metadata.get('agent', 'Compliance Checker Agent')],
            ['Standards Analyzed', ', '.join(metadata.get('standards_analyzed', []))],
            ['Document Length', f"{metadata.get('document_length', 0)} characters"],
            ['Processing Method', 'Multi-Agent AI Analysis']
        ]
        
        for i, (label, value) in enumerate(meta_data):
            meta_table.cell(i, 0).text = label
            meta_table.cell(i, 1).text = str(value)
            meta_table.cell(i, 0).paragraphs[0].runs[0].font.bold = True
        
        doc.add_paragraph()
        
        # Regulatory references
        doc.add_heading('B. Referensi Regulasi', level=2)
        
        references = [
            "• GDPR (General Data Protection Regulation) - Regulation (EU) 2016/679",
            "• ISO/IEC 27001:2022 - Information Security Management Systems",
            "• PP No. 71 Tahun 2019 - Penyelenggaraan Sistem dan Transaksi Elektronik",
            "• ReguBot AI System - Multi-Agent Compliance Analysis Framework"
        ]
        
        for ref in references:
            doc.add_paragraph(ref)
        
        doc.add_paragraph()
        
        # Footer
        doc.add_paragraph("─" * 80)
        
        footer_text = f"""
📄 DISCLAIMER:
Laporan ini dibuat secara otomatis oleh ReguBot Multi-Agent AI System. Analisis dilakukan 
menggunakan teknologi AI offline dengan model llama3:8b-instruct-q4_K_M. Hasil analisis 
bersifat rekomendasi dan perlu dikonfirmasi dengan ahli hukum untuk implementasi final.

🔒 KEAMANAN DATA:
Seluruh proses analisis dilakukan secara offline dan lokal. Tidak ada data yang dikirim 
ke server eksternal atau cloud. Dokumen dan hasil analisis tersimpan aman di device Anda.

💬 SUPPORT:
Untuk pertanyaan lebih lanjut mengenai hasil analisis, gunakan fitur chatbot ReguBot 
yang tersedia di aplikasi web.

© 2024 ReguBot - Multi-Agent AI Compliance Solution
Generated on: {datetime.now().strftime('%d %B %Y at %H:%M:%S WIB')}
        """
        
        footer_para = doc.add_paragraph(footer_text.strip())
        footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
